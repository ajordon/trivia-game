{"version":3,"sources":["components/game-view/triviaSummary.js","components/game-view/startScreen.js","components/game-view/answer-box/answerSelect.js","components/game-view/questionsBox.js","components/game-view/difficultySelect.js","components/triviaGame.js","App.js","serviceWorker.js","index.js"],"names":["TriviaSummary","handleAnswerStyles","bind","index","this","props","answers","questions","handleRestart","className","map","question","i","key","he","decode","correct_answer","type","onClick","React","Component","StartScreen","handleClick","BooleanSelect","value","MultiSelect","options","option","QuestionsBox","qIndex","incorrect_answers","push","DifficultySelect","handleDiffSelect","selected","onChange","TriviaGame","state","gameStatus","gameScore","qType","qDifficulty","handleGameStart","handleGameHeader","handleGameButtons","handleScoreGrade","handleDifficultyChange","category","e","setState","target","score","preventDefault","BASE_URL","fetch","then","res","json","data","results","error","alert","tempAnswer","handleGameBox","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.12080672.chunk.js","sourcesContent":["import React from 'react';\nimport he from 'he';\n\nclass TriviaSummary extends React.Component {\n  constructor(){\n    super();\n\n    this.handleAnswerStyles = this.handleAnswerStyles.bind(this);\n  }\n\n  handleAnswerStyles(index) {\n    const { answers } = this.props;\n    if (answers[index] === 0) {\n      return \"answer wrong\";\n    } else {\n      return \"answer correct\";\n    }\n  };\n\n  render() {\n    const { questions, handleRestart } = this.props;\n    return (\n      <div className=\"answer-block\">\n        {questions.map(\n          (question, i) => <div className={this.handleAnswerStyles(i)} key={i}>\n            {he.decode(question.question)}\n            <p className=\"answer-subtext\">Correct Answer: {question.correct_answer}</p>\n          </div>)}\n        <br />\n        <button className=\"begin-btn\" type=\"submit\" onClick={handleRestart}>Play Again?</button>\n      </div>\n    )}\n};\n\nexport default TriviaSummary;","import React from 'react';\n\nconst StartScreen = props => {\n  const { handleClick } = props;\n  return (\n    <>\n      <p>You will be presented with 10 questions</p>\n      <br />        \n      <p>Can you score 100%?</p>\n      <br />\n      <button className=\"begin-btn\" type=\"button\" onClick={handleClick}>Begin</button>\n    </>\n  )\n};\n\nexport default StartScreen;","import React from 'react';\nimport he from 'he';\n\nconst BooleanSelect = props => {\n  const { handleClick } = props;\n  return (\n    <div className=\"bool-select\">\n      <button className=\"true-btn\" type=\"submit\" value=\"True\" onClick={handleClick}>True</button>\n      <button className=\"false-btn\" type=\"submit\" value=\"False\" onClick={handleClick}>False</button>\n    </div>\n  )\n};\n\nconst MultiSelect = props => {\n  const { options, handleClick } = props;\n  return (\n    <div className=\"multi-select\">\n      {options.map((option, i) => \n        <button className=\"multi-btn\" type=\"submit\" value={option} onClick={handleClick} key={i}>{he.decode(option)}</button>)}\n    </div>\n  )\n};\n\nexport { BooleanSelect, MultiSelect };","import React from 'react';\nimport he from 'he';\nimport { BooleanSelect, MultiSelect } from './answer-box/answerSelect';\n\nconst QuestionsBox = props => {\n  const { question, qIndex, handleClick } = props;\n  var options = question.incorrect_answers;\n  options.push(question.correct_answer);  \n\n  return (\n    <div className=\"q-container\">\n      <div className=\"question-box\">{he.decode(question.question)}</div>\n      {qIndex + 1} of 10\n      <br />\n      {question.type === \"boolean\" ? <BooleanSelect handleClick={handleClick} />\n        : <MultiSelect options={options} handleClick={handleClick} />}\n    </div>\n  )\n};\n\nexport default QuestionsBox;","import React from 'react';\n\nconst DifficultySelect = props => {\n  const { handleDiffSelect, selected } = props;\n  return (\n    <div className=\"difficulty-select\">\n       <select value={selected} onChange={handleDiffSelect}>\n          <option value=\"hard\">Hard</option>\n          <option value=\"medium\">Medium</option>\n          <option value=\"easy\">Easy</option>\n        </select>\n    </div>\n  )\n};\n\nexport default DifficultySelect;","import React from 'react';\nimport TriviaSummary from './game-view/triviaSummary';\nimport StartScreen from './game-view/startScreen';\nimport QuestionsBox from './game-view/questionsBox';\nimport DifficultySelect from './game-view/difficultySelect';\n\nclass TriviaGame extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      gameStatus: 0,\n      gameScore: 0,\n      questions: [],\n      answers: [],\n      qIndex: 0,\n      qType: 'boolean', \n      qDifficulty: 'hard'\n    }\n\n    this.handleGameStart = this.handleGameStart.bind(this);\n    this.handleGameHeader = this.handleGameHeader.bind(this);\n    this.handleGameButtons = this.handleGameButtons.bind(this);\n    this.handleRestart = this.handleRestart.bind(this);\n    this.handleScoreGrade = this.handleScoreGrade.bind(this);\n    this.handleDifficultyChange = this.handleDifficultyChange.bind(this);\n  }\n\n  handleGameHeader() {\n    const { gameStatus, questions, gameScore, qIndex, qDifficulty } = this.state;\n    if (gameStatus === 0) {\n      return (<div>\n        <h3>Welcome to the Trivia Challenge!</h3>\n        <label>Select Your Difficulty: \n          <DifficultySelect selected={qDifficulty} handleDiffSelect={this.handleDifficultyChange} /> \n        </label>  \n      </div>);\n    } else if (gameStatus === 1) {\n      return (<h3>{questions ? questions[qIndex].category : '' }</h3>);\n    } else {\n      return (<h3>{this.handleScoreGrade(gameScore)}\n        <br />You scored {gameScore}/10</h3>);\n    } \n  }\n\n  handleDifficultyChange(e) {\n    this.setState({ qDifficulty: e.target.value });\n  }\n\n  handleScoreGrade(score) {\n    if (score < 4){\n      return \"Better luck next time...\";\n    } else if (score  <= 6) {\n      return \"Not Bad!\";\n    } else {\n      return \"Your a Genius!\";\n    }\n  }\n\n  handleGameStart(e) {\n    e.preventDefault();\n    const { qDifficulty } = this.state;\n    const BASE_URL = `https://opentdb.com/api.php?amount=10&difficulty=${qDifficulty}`;\n    try {\n      fetch(BASE_URL)\n        .then(res => res.json())\n        .then(data => {\n          this.setState({\n            gameStatus: 1,\n            questions: data.results,\n        })\n      });\n    }\n    catch(error) {\n      alert(\"An error has occured fetching questions: \", error);\n    }\n  }\n\n  handleGameButtons(e) {\n    e.preventDefault();\n    const value = e.target.value;\n    const { qIndex, answers, questions, gameScore } = this.state;\n\n    var tempAnswer = answers;\n    if (questions && questions[qIndex].correct_answer === value) {\n      tempAnswer.push(1);\n    } else {\n      tempAnswer.push(0);\n    }\n\n    if (qIndex !== 9) {\n      this.setState({\n        qIndex: qIndex + 1, \n        answers: tempAnswer,\n        gameScore: tempAnswer[qIndex] === 1 ? gameScore + 1 : gameScore});\n    } else {\n      this.setState({ gameStatus: 2, \n        answers: tempAnswer,\n        gameScore: tempAnswer[qIndex] === 1 ? gameScore + 1 : gameScore });\n    }\n  }\n\n  handleGameBox() {\n    const { gameStatus, questions , qIndex, answers, gameScore } = this.state;\n\n    if (gameStatus === 0) {\n      return <StartScreen handleClick={this.handleGameStart} />;\n    } else if (gameStatus === 1) {\n      return <QuestionsBox question={questions[qIndex]} \n                qIndex={qIndex} \n                handleClick={this.handleGameButtons} />;\n    } else {\n      return <TriviaSummary questions={questions} \n                answers={answers} \n                score={gameScore} \n                handleRestart={this.handleRestart} />;\n    }\n  }\n\n  handleRestart(e) {\n    e.preventDefault();\n    this.setState({\n      gameStatus: 0,\n      gameScore: 0,\n      questions: [],\n      answers: [],\n      qIndex: 0,\n      qType: 'boolean',\n      qDifficulty: 'hard'});\n  }\n\n  render() {\n    return (\n      <>\n        {this.handleGameHeader()}\n        <br />\n        {this.handleGameBox()}\n      </>\n    )\n  }\n};\n\nexport default TriviaGame;","import React from 'react';\nimport './App.css';\nimport TriviaGame from './components/triviaGame';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div className=\"game-trivia\">\n          <h3 className=\"game\">Game</h3>\n          <h1 className=\"trivia\">Trivia!</h1>\n        </div>\n      </header>\n      <hr className=\"hr\"/>\n      <div className=\"game-wrapper\">\n        <TriviaGame />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// Enable Hot reloading for faster development\nif (module.hot) {\n  module.hot.accept('./App', () => {\n    const NextApp = require('./App').default\n    ReactDOM.render(\n      <NextApp />,\n      document.getElementById('root'))\n  })\n}\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}